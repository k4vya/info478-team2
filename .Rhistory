hist(zscoresMAL, xlab = "Z-Scores of Male Chinooks", ylab = "Frequency", main = "Male Chinook Z-Scores", xlim = c(-4, 4), ylim = c(0, 20))
hist(zscoresFEM, xlab = "Z-Scores of Female Chinooks", ylab = "Frequency", main = "Female Chinook Z-Scores", xlim = c(-4, 4), ylim = c(0, 20))
nests <- c(3, 8, 5, 2, 2, 4, 2, 4, 3, 3, 2, 3, 4, 1, 2, 4, 5, 0, 3, 3)
mean(nests)
var(nest)
nests <- c(3, 8, 5, 2, 2, 4, 2, 4, 3, 3, 2, 3, 4, 1, 2, 4, 5, 0, 3, 3)
mean(nests)
var(nests)
dbinom(nests)
dbinom(4, 20, .1575)
pbinom(5, 20, .1575)
1 - pbinom(6, 20, .1575)
dbinom(2, 20, .1575)
dbinom(3, 20, .1575)
dbinom(4, 20, .1575)
dbinom(1, 20, .1575)
dbinom(0, 20, .1575)
1 - pbinom(5, 20, .1575)
1- pbinom(6, 20, .1575)
1 - pbinom(4, 20, .1575)
15*.1575
15*.1575(1-.1575)
15*.1575*(1-.1575)
sqrt(15*.1575*(1-.1575))
bears <- c(5, 13, 8, 3, 3, 7, 4, 6, 4, 5, 4, 4, 6, 2, 3, 7, 7, 1, 5, 5, 4, 8, 7, 3, 4, 9, 7, 6, 6, 5)
cougars <- c(5, 5, 3, 2, 2, 1, 0, 3, 2, 3, 1, 1, 8, 4, 1, 4, 1, 7, 4, 5, 4, 2, 1, 3, 2, 2, 2, 2, 5, 1)
mean(bears)
var(bears)
mean(cougars)
var(cougars)
dpois(3, 5.367)
dpois(2, 2.867)
dpois(3, 5.367) + dpois(2, 2.867)
view data(trees)
view(data(trees))
data(trees)
view(trees)
data(trees)
trees
mean(trees$Height)
median(trees$Height)
var(trees$Height)
sd(trees$Height)
hist(trees$Height, xlab = "Height", ylab = "Frequency", main = "Tree Heights", col = green)
> hist(trees$Height, xlab = "Height", ylab = "Frequency", main = "Tree Heights", col = "green")
hist(trees$Height, xlab = "Height", ylab = "Frequency", main = "Tree Heights", col = "green")
(68-mean(trees$Height))/sd(trees$Height)
pnorm(-1.25553, 0, 1, TRUE)
pnorm(-1.25553, 0, 1, FALSE)
qnorm(0.25, 0, 1,)*sd(trees$Height)+mean(trees$Height)
qnorm(0.90, 0, 1,)*sd(trees$Height)+mean(trees$Height)
pnorm(trees$Height, mean(trees$Height))
pnorm(trees$Height, mean(trees$Height), sd(trees$Height), TRUE)
prob <- pnorm(trees$Height, mean(trees$Height), sd(trees$Height), TRUE)
prob
plot(x = trees$Height, y = prob, xlab = "Height of Trees", ylab = "Probabilities", main = "Probabilities of Tree Heights")
qqnorm(trees$Height)
qqline(trees$Height)
drug <- c(8.9,7.8,8.1,7.1,6.9,11.4,12.5,8.6,11.6,10.4)
placebo <- c(7.7,5.4,6.8,5.8,6.9,10.4,10.7,7.8,7.0,9.0)
var.test(drug, placebo)
t.test(drug, placebo, alternative = "right.sided", var.equal = TRUE)
t.test(drug, placebo, alternative = "greater", var.equal = TRUE)
data(InsectSprays)
view(InsectSprays)
View(InsectSprays)
View(InsectSprays)
anova.test <- aov(count ~ spray, InsectSprays)
anova.test
summary(anova.test)
boxplot(InsectSprays)
boxplots(InsectSprays$spray)
boxplot(InsectSprays$spray)
boxplot(InsectSprays$count)
boxplot(count, InsectSprays)
boxplot(InsectSprays$count)
boxplot(InsectSprays$count, InsectSprays)
boxplots(InsectSprays$count, InsectSprays$spray, InsectSprays)
boxplot(InsectSprays$count, InsectSprays$spray, InsectSprays)
boxplot(InsectSprays$count[InsectSprays$count])
boxplot(InsectSprays$count[InsectSprays$spray])
boxplot(InsectSprays$count[InsectSprays$spray == "A"], InsectSprays$count[InsectSprays$spray == "B"], InsectSprays$count[InsectSprays$spray == "C"], InsectSprays$count[InsectSprays$spray == "D"], InsectSprays$count[InsectSprays$spray == "E"], InsectSprays$count[InsectSprays$spray == "F"] )
data("HairEyeColor")
students <- apply(HairEyeColor, c(1:2), sum)
chisq.test(students)
food <- c(35, 16, 22, 26)
prob <- c(.25, .25, .25, .25)
freq <- prob*(35+16+22+26)
chisq.test(food, p = prob)
sum((food-freq)^2/freq)
airquality(na.omit(airquality))
data(airquality)
airquality(na.omit(airquality))
airquality <- na.omit(airquality)
head(air)
hair(airquality)
head(airquality)
plot(airquality$Temp, airquality$Ozone)
plot(airquality$Temp, airquality$Ozone, xlab = "Temperature", ylab = "Ozone")
cor(airquality$Temp, airquality$Ozone)
length(airquality)
length(airquality$Ozone)
qt(p = .05/2, df = 109)
r <- .6985414
(r*(sqrt(109)))/sqrt(q-r^2)
(r*(sqrt(109)))/sqrt(1-r^2)
cor.test(airquality$Temp, airquality$Ozone)
View(anova.test)
View(anova.test)
x <- 6
x <- 6
num_students <- 208
hours_in_a_week <- 24 * 7
num_students
# Store the number of sections in info 201 in a variable
num_sections <- 8
students_per_sections <- num_students / num_sections
students_per_sections
temperature <- 66.4
name <- "Mike"
equality <- 3 > 2
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- Paris
# Assign your name to the variable `my_name`
my_name <- Katia
# Assign your height (in inches) to a variable `my_height`
my_height <- ((5 * 12) + 5)
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 3
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 3 * 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- 1000 < total_cost
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / 1000
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Paris"
# Assign your name to the variable `my_name`
my_name <- "Katia"
# Assign your height (in inches) to a variable `my_height`
my_height <- ((5 * 12) + 5)
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 3
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 3 * 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- 1000 < total_cost
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / 1000
# CALLING FUNCTIONS
min(3, 10, pi)
# CALLING FUNCTIONS
smallest_num <- min(3, 10, pi)
biggest_num <- max(3, 10, pi)
seq(10, 50)
paste("Hello", "World!")
paste("There are", students_per_sections, "students in each section of INFO 201")
# BASIC R SYNTAX
x <- 6
# Store the number of INFO 201 students in a variable
num_students <- 208
hours_in_a_week <- 24 * 7
# This is a comment (R will ignore!)
num_students
# ctrl enter acts like run
# Store the number of sections in info 201 in a variable
num_sections <- 8
students_per_sections <- num_students / num_sections
students_per_sections
temperature <- 66.4
name <- "Mike"
equality <- 3 > 2
# CALLING FUNCTIONS
smallest_num <- min(3, 10, pi)
biggest_num <- max(3, 10, pi)
seq(10, 50)
paste("Hello", "World!")
paste("There are", students_per_sections, "students in each section of INFO 201")
library(stringr)
install.packages("stringr")
library(stringr)
str_trim("     space before and after     ")
str_trim?
?str_trim
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
fruits <- substr(lyric, 15, 32)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", x)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a ", "ee ", x)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a ", "ee ", lyrics)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a ", "ee ", lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", lyric)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyrics_e <- c(intro, fruits_e)
print(lyrice_e)
print(lyrics_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(lyrics_e)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", lyric)
lyrics_e <- paste(intro, fruits_e)
print(lyrics_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyrics_e <- paste(intro, fruits_e)
print(lyrics_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
test <- xtile(c(4, 5, 6, 7), 10, probs = NULL, cutpoints = NULL, wt = NULL)
install.packages("statar")
library("statar")
test <- xtile(c(4, 5, 6, 7), 10, probs = NULL, cutpoints = NULL, wt = NULL)
install.packages(c("digest", "caTools", "bitops"))
update.packages()
View(midwest)
View("midwest")
View(midwest)
shiny::runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
?toJSON
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
View(midwest)
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp()
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
t1_sidebar <- sidebarPanel(
h1("Select the race of interest:"),
selectInput(
inputId = "race",
label = "Race",
choices = c( "White" = "popwhite",
"Black" = "popblack",
"American Indian" = "popamerindian",
"Asian" = "popasian",
"Other" = "popother")
),
checkboxInput(inputId = "checkbox",
label = "Population Total",
value = FALSE)
)
runApp()
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp()
runApp()
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp()
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
install.packages("rcurl")
shiny::runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
install.packages("rcurl")
install.packages("rcurl")
install.packages("rcurl")
install.packages("rcurl")
install.packages("tidyverse")
install.packages("rcurl")
install.packages("RCurl")
shiny::runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp()
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
shiny::runApp('C:/Users/cello/Documents/info201/a6-kwanneroy')
knitr::opts_chunk$set(echo = TRUE)
# odds ratio - look at the result first
odds_liver_disease <- 75 / 25
odds_no_liver_disease <- 50 / 100
or_liver_alcohol <- odds_liver_disease / odds_no_liver_disease
knitr::opts_chunk$set(echo = TRUE)
# odds ratio - look at the result first
odds_liver_disease <- 75 / 25
odds_no_liver_disease <- 50 / 100
or_liver_alcohol <- odds_liver_disease / odds_no_liver_disease
# relative risk - over time
risk_veg_ha <- 10 / 100
risk_meat_ha <- 20 / 100
rr_veg_ha <- risk_veg_ha / risk_meat_ha
rr_veg_ha
# relative risk
risk_bike_ta <- 30 / 100
risk_bus_ta <- 10 / 120
rr_bike_ta <- risk_bike_ta / risk_bus_ta
rr_bike_ta
# odds ratio
odds_cavity <- 80 / 220
odds_no_cavity <- 70/180
or_cavity_seltzer <- odds_cavity / odds_no_cavity
or_cavity_seltzer
# Function
relative_risk <- function(dataframe, column) {
risk <- (column / birthwt$lwt)/(birthwt$bwt)
dataframe %>%
mutate(column = risk)
}
relative_risk(birthwt, birthwt$smoke)
data("birthwt")
# Script in which you should do your analysis described on Canvas
library("HSAUR")
library("MASS")
library("Epi")
library(dplyr)
library(knitr)
library(ggplot2)
library(tidyverse)
bcg <- data("BCG")
data("birthwt")
data("bdendo")
# Function
relative_risk <- function(dataframe, column) {
risk <- (column / birthwt$lwt)/(birthwt$bwt)
dataframe %>%
mutate(column = risk)
}
relative_risk(birthwt, birthwt$smoke)
relative_risk(birthwt, birthwt$smoke)
View(birthwt)
# Function
relative_risk <- function(dataframe, column) {
risk <- (column / birthwt$lwt)/(birthwt$bwt)
dataframe <- dataframe %>%
mutate(column = risk)
}
relative_risk(birthwt, birthwt$smoke)
View(birthwt)
# Function
relative_risk <- function(column) {
risk <- (column / birthwt$lwt)/(birthwt$bwt)
birthwt <- birthwt %>%
mutate(column = risk)
}
relative_risk(birthwt$smoke)
# Function
relative_risk <- function(column) {
risk <- (column / birthwt$lwt)/(birthwt$bwt)
}
smoke_risk <- relative_risk(birthwt$smoke)
birthwt <- birthwt %>%
mutate(smoke_risk = smoke_risk)
# Hypertension status
ht_risk <- relative_risk(birthwt$ht)
birthwt <- birthwt %>%
mutate(ht_risk = ht_risk)
# Attending 0 prenatal care visits
ptl_risk <- relative_risk(birthwt$ptl = 0)
# Attending 0 prenatal care visits
ptl_risk <- relative_risk(birthwt$ptl == 0)
birthwt <- birthwt %>%
mutate(ptl_risk = ptl_risk)
# Giving birth before age 20
age_20_under <- relative_risk(birthwt$age < 20)
birthwt <- birthwt %>%
mutate(age_20_under = age_20_under)
library("Epi")
View(bdendo)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(reshape)
mdata <- melt(mydata, id=c("id","time"))
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(reshape)
install.packages("reshape")
library(reshape)
# Set up data
state_income <- read.csv("data/household_median_income_2017.csv")
setwd("C:/Users/cello/info478/project/info478-team2")
# Set up data
state_income <- read.csv("data/household_median_income_2017.csv")
overdose_deaths <- read.csv("data/drug_overdose_deaths.csv")
# Merge Datasets
income_vs_deaths <- merge(state_income, overdose_deaths, by = 'State')
income_vs_deaths_2017 <- income_vs_deaths %>% select(State, X2017, X2017.Number.of.Deaths)
mdata <- melt(income_vs_deaths_2017, id="State")
names(income_vs_deaths_2017)[2] <- "income"
names(income_vs_deaths_2017)[3] <- "deaths"
mdata <- melt(income_vs_deaths_2017, id="State")
View(mdata)
View(income_vs_deaths_2017)
View(mdata)
View(mdata)
# Making plot
ggplot(mdata, aes(fill=value, y=variable, x=State)) +
geom_bar(position="dodge", stat="identity")
# Merge Datasets
income_vs_deaths <- merge(state_income, overdose_deaths, by = 'State')
income_vs_deaths_2017 <- income_vs_deaths %>% select(State, X2017, as.integer(X2017.Number.of.Deaths))
income_vs_deaths_2017 <- income_vs_deaths %>% select(State, X2017, as.integer("X2017.Number.of.Deaths"))
deaths[1]
mdata[deaths]
income_vs_deaths_2017$deaths
typeof(income_vs_deaths_2017$deaths)
