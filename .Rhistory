<<<<<<< HEAD
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
salaries$got_raise <- salaries$salaries_2018 > salaries$salaries_2017
salary_57 <- salaries[salaries$employees == "Employee 57", "salaries_2018"]
nrow(salaries[salaries$got_raise == TRUE, ])
highest_raise <- max(salaries$salary_adjustments)
got_biggest_raise <- salaries[salaries$salary_adjustments == highest_raise, "employees"]
biggest_paycut <- min(salaries$salary_adjustments)
got_biggeest_paycut <- salaries[salaries$salary_adjustments == biggest_paycut, "employees"]
avg_increase <- mean(salaries$salary_adjustments)
avg_loss <- mean(salaries$salary_adjustments[salaries$got_raise == FALSE])
write.csv(salaries, "salaries.csv")
data("USPersonalExpenditure")
is.data.frame(USPersonalExpenditure)
us_exp <- data.frame(USPersonalExpenditure)
colnames(us_exp)
rownames(us_exp)
us_exp$category <- rownames(us_exp)
care_1940 <- us_exp["Personal Care", "X1940"]
food_1960 <- us_exp["Food and Tobacco", "X1960"]
highest_1960 <- us_exp$category[us_exp$X1960 == max(us_exp$X1960)]
lowest_category <- function(year) {
col <- paste0("X", year)
us_exp$category[us_exp[, col] == min(us_exp[, col])]
}
lowest <- sapply(seq(1940, 1960, 5) lowest_category)
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
# Assignment 3: Using Data
#
# Before you get started:
# - Set your working directory to "source file location" using the Session menu
# - Run the following line of code to delete all variables in your workspace
#     (This will make it easier to test your script)
rm(list = ls())
data(Titanic)
is.data.frame(titanic_data_table)
is.data.frame(titanic)
is.data.frame(Titanic)
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
View(titanic_df)
children <- titanic_df[titanic_df$Age == "Child", ]
num_children <- sum(children$Freq)
non_survivors <- titanic_df[titanic_df$Survived == "No", ]
most_lost <- non_survivors[non_survivors$Freq == max(non_survivors$Freq),]
print(most_lost)
survival_rate <- function(ticket_class) {
class_df <- titanic_df[titanic_df$Class == ticket_class, ]
men_df <- class_df[class_df$Sex == "Male" & class_df$Age == "Adult", ]
men_survived <- men_df[men_df$Survived == "Yes", ]
men_survival_rate <- round(men_survived[, "Freq"]) / sum(men_df[, "Freq"] *100)
women_child_df <- class_df[class_df$Sex == "Female" | class_df$Age == "Child", ]
women_child_survived <- women_child_df[women_child_df$Survived == "Yes", ]
women_child_survival_rate <- round(women_child_survived[, "Freq"]) / sum(women_child_df[, Freq] * 100)
survival_rate_sentence <- paste0("Of", ticket_class, "class, "
, women_child_survival_rate, "% of women and children survived and" ,
men_survival_rate, "% of men survived")
return(survival_rate_sentence)
}
first_survived <- survival_rate("1st")
first_survived <- survival_rate("1st")
survival_rate <- function(ticket_class) {
class_df <- titanic_df[titanic_df$Class == ticket_class, ]
men_df <- class_df[class_df$Sex == "Male" & class_df$Age == "Adult", ]
men_survived <- men_df[men_df$Survived == "Yes", ]
men_survival_rate <- round(men_survived[, "Freq"]) / sum(men_df[, "Freq"]) * 100)
women_child_df <- class_df[class_df$Sex == "Female" | class_df$Age == "Child", ]
women_child_survived <- women_child_df[women_child_df$Survived == "Yes", ]
women_child_survival_rate <- round(women_child_survived[, "Freq"]) / sum(women_child_df[, Freq]) * 100)
survival_rate_sentence <- paste0("Of", ticket_class, "class, "
, women_child_survival_rate, "% of women and children survived and" ,
men_survival_rate, "% of men survived")
return(survival_rate_sentence)
}
survival_rate <- function(ticket_class) {
class_df <- titanic_df[titanic_df$Class == ticket_class, ]
men_df <- class_df[class_df$Sex == "Male" & class_df$Age == "Adult", ]
men_survived <- men_df[men_df$Survived == "Yes", ]
men_survival_rate <- round(sum(men_survived[, "Freq"]) / sum(men_df[, "Freq"]) * 100)
women_kids_df <- class_df[class_df$Sex == "Female" | class_df$Age == "Child", ]
women_kids_survived <- women_kids_df[women_kids_df$Survived == "Yes", ]
women_kids_survival_rate <- round(sum(women_kids_survived[, "Freq"]) / sum(women_kids_df[, "Freq"]) * 100)
survival_rate_statement <- paste0("Of ", ticket_class, " class, ", men_survival_rate, "% of men survived and ", women_kids_survival_rate, "% of women and children survived.")
survival_rate_statement
}
first_survived <- survival_rate("1st")
survival_rate <- function(ticket_class) {
class_df <- titanic_df[titanic_df$Class == ticket_class, ]
men_df <- class_df[class_df$Sex == "Male" & class_df$Age == "Adult", ]
men_survived <- men_df[men_df$Survived == "Yes", ]
men_survival_rate <- round(sum(men_survived[, "Freq"]) / sum(men_df[, "Freq"]) * 100)
women_kids_df <- class_df[class_df$Sex == "Female" | class_df$Age == "Child", ]
women_kids_survived <- women_kids_df[women_kids_df$Survived == "Yes", ]
women_kids_survival_rate <- round(sum(women_kids_survived[, "Freq"]) / sum(women_kids_df[, "Freq"]) * 100)
survival_rate_sentence <- paste0("Of ", ticket_class, " class, ", men_survival_rate, "% of men survived and ", women_kids_survival_rate, "% of women and children survived.")
return(survival_rate_sentence)
}
survival_rate <- function(ticket_class) {
class_df <- titanic_df[titanic_df$Class == ticket_class, ]
men_df <- class_df[class_df$Sex == "Male" & class_df$Age == "Adult", ]
men_survived <- men_df[men_df$Survived == "Yes", ]
men_survival_rate <- round(sum(men_survived[, "Freq"]) / sum(men_df[, "Freq"]) * 100)
women_children_df <- class_df[class_df$Sex == "Female" | class_df$Age == "Child", ]
women_children_survived <- women_children_df[women_children_df$Survived == "Yes", ]
women_children_survival_rate <- round(sum(women_children_survived[, "Freq"]) / sum(women_children_df[, "Freq"]) * 100)
survival_rate_sentence <- paste0("Of ", ticket_class, " class, ", men_survival_rate, "% of men survived and ", women_children_survival_rate, "% of women and children survived.")
return(survival_rate_sentence)
}
first_survived <- survival_rate("1st")
second_survived <- survival_rate("2nd")
third_survived <- survival_rate("3rd")
crew_survived <- survival_rate("Crew")
print(first_survived)
print(second_survived)
print(third_survived)
print(crew_survived)
install.packages(dplyr)
install.packages("DPLYR")
install.packages("dplyr")
library(dplyr)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
View(vehicles)
makes <- vehicles$make
length(unique(makes))
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
vehicles_1997 <- vehicles_1997[order(vehicles_1997$hwy), ]
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty) / 2
two_wheel_20_mpg <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20, ]
worst_hwy <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
make_year_filter <- function(make_choice, year_choice) {
filtered <- vehicles[vehicles$makes == make_choice & vehicles$year == year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), "model"]
}
make_year_filter("Honda", 1995)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
library(dplyr)
library("dplyr")
makes <- select(vehicles, make)
nrow(distinct(vehicles, make))
cars_1997 <- arrange(cars_1997, hwy)
cars_1997 <- mutate(cars_1997, average = (hwy + cty) / 2)
cars_1997 <- filter(vehicles, year == 1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = (hwy + cty) / 2)
two_wheel_20_mpg <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
filtered <- filter(two_wheel_20_mpg, hwy == min(hwy))
worst_hwy <- select(filtered, id)
make_year_filter <- function(make_choice, year_choice) {
filtered <- filter(vehicles, make == make_choice, year == year_choice)
filtered <- filter(filtered, hwy == max(hwy))
selected <- select(filtered)
selected
}
make_year_filter("Honda", 1995)
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library("fueleconomy")
acuras <- filter(vehicles, make == "Acura", year == 2015)
best_acura <- filter(acuras, hwy == max(hwy))
best_model <- select(best_acura, model)
best_model <- select(
filter(
filter(vehicles, make == "Acura", year == 2015), hwy == max(hwy)
), model
)
best_model <- filter(vehicles, make == "Acura", year == 2015) %>%
filter(hwy == max(hwy)) %>%
selectt(model)
best_model <- filter(vehicles, make == "Acura", year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
library(dplyr)
install.packages("nycflights13")
library(nycflights13)
nrow(flights)
ncol(flights)
colnames(flights)
?flights
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
flights <- arrange(flights, desc(gain_in_air))
View(head(flights))
flights <- flights %>% mutate(gain_in_air = arr_delay - dep_delay) %>% arrange(desc(gain_in_air))
hist(flights$gain_in_air)
mean(flights$gain_in_air, na.rm = TRUE)
to_sea <- flights %>% select(origin, dest, gain_in_air) %>% filter(dest == "SEA")
mean(to_sea$gain_in_air, na.rm = TRUE)
filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(
avg_air_time = mean(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE)
)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
filter(dep_delay_by_month, delay == max(delay)) %>% select(month)
plot(dep_delay_by_month)
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
filter(airports, faa == arr_delay_by_month$dest[2])
city_fasted_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_fasted_speed
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(avg_delay == max(avg_delay, na.rm = TRUE))
largest_arrival_delay
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
largest_arrival_delay
smallest_airrival_delay <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
smallest_arrival_delay
smallest_airrival_delay <- flights %>%
group_by(carrier) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
smallest_arrival_delay
install.packages("ggplot2")
library("ggplot2")
install.packages("plotly")
library(plotly)
library(gglot2)
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
diamonds_sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = cut), alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut), se = FALSE)
install.packages("shiny")
shiny::runApp('Documents/INFO201/exercises-lukomh-1675024/chapter-19-exercises/exercise-1')
runApp('Documents/INFO201/exercises-lukomh-1675024/chapter-19-exercises/exercise-1')
#First Chart - Z
rm(list=ls())
library("ggplot2")
library("dplyr")
library("plotly")
library("leaflet")
# This file returns Line graph of revenue growth with test score growth
df_schools <- read.csv("data/states_all_extended.csv", stringsAsFactors = FALSE)
working_df <- df_schools %>%
filter(!is.na(AVG_MATH_8_SCORE))%>%
filter(!is.na(AVG_MATH_4_SCORE))%>%
filter(!is.na(AVG_READING_4_SCORE))%>%
filter(!is.na(AVG_READING_8_SCORE))%>%
filter(!is.na(TOTAL_REVENUE)) %>%
filter(!is.na(FEDERAL_REVENUE))%>%
filter(!is.na(STATE_REVENUE))%>%
filter(!is.na(LOCAL_REVENUE))%>%
filter(!is.na(TOTAL_EXPENDITURE))%>%
filter(!is.na(INSTRUCTION_EXPENDITURE))%>%
filter(!is.na(SUPPORT_SERVICES_EXPENDITURE))%>%
filter(!is.na(CAPITAL_OUTLAY_EXPENDITURE))%>%
select(
STATE, YEAR, TOTAL_REVENUE, FEDERAL_REVENUE,
STATE_REVENUE, LOCAL_REVENUE, TOTAL_EXPENDITURE,
INSTRUCTION_EXPENDITURE, SUPPORT_SERVICES_EXPENDITURE,
CAPITAL_OUTLAY_EXPENDITURE, AVG_MATH_4_SCORE,
AVG_MATH_8_SCORE, AVG_READING_4_SCORE, AVG_READING_8_SCORE
)
working_df <- working_df %>%
group_by(state)
na.omit(df_schools)
new_df <- df_schools %>%
select(YEAR, AVG_MATH_4_SCORE, AVG_MATH_8_SCORE, AVG_READING_4_SCORE)
#Graph
ggplot(data = new_df) +
geom_line(mapping = aes(x = YEAR, y = AVG_MATH_8_SCORE, group=supp))
geom_line(aes(color=supp))+
geom_point(aes(color=supp))
) +
labs(
title = "Graph",
x = "Year",
y = "Math Score",
fill = "Key"
)
ggplot(working_df)
geom_lin(aes(x = working_df$state, y = working_df$num_killed))
ggplot((data= working_df, aes(x=state, y= num_killed, group=1)) +
geom_line()
) +
labs(
title = "Graph",
x = "State",
y = "Killed",
fill = "Key"
)
year <- c("2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018")
bannans <- c(30, 40, 50, 60, 50, 80, 90, 100, 95, 110)
strawberries <- c(24, 23, 10, 30, 43, 51, 59, 64, 70, 90)
test_df <- data.frame(year, bannans, strawberries)
percent_df <- test_df %>%
mutate(
percent_change_straw = round((((strawberries - 24) / 24)*100), digits = 2),
percente_change_ban = round((((bannans -30)/30)*100), digits = 2)
)
ggplot((data= percent_df, aes(x= year, y= , group=1)) +
geom_line()
) +
labs(
title = "Graph",
x = "State",
y = "Killed",
fill = "Key"
)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
education_df <- read.csv("/Users/wildbird/final-project-lukomh-1675024/data/states_all_extended.csv",
stringsAsFactors
= FALSE)
working_df <- education_df %>%
filter(!is.na(AVG_MATH_8_SCORE)) %>%
filter(!is.na(AVG_MATH_4_SCORE)) %>%
filter(!is.na(AVG_READING_4_SCORE)) %>%
filter(!is.na(AVG_READING_8_SCORE)) %>%
filter(!is.na(TOTAL_REVENUE)) %>%
filter(!is.na(FEDERAL_REVENUE)) %>%
filter(!is.na(STATE_REVENUE)) %>%
filter(!is.na(LOCAL_REVENUE)) %>%
filter(!is.na(TOTAL_EXPENDITURE)) %>%
filter(!is.na(INSTRUCTION_EXPENDITURE)) %>%
filter(!is.na(SUPPORT_SERVICES_EXPENDITURE)) %>%
filter(!is.na(CAPITAL_OUTLAY_EXPENDITURE)) %>%
select(
STATE, YEAR, TOTAL_REVENUE, FEDERAL_REVENUE,
STATE_REVENUE, LOCAL_REVENUE, TOTAL_EXPENDITURE,
INSTRUCTION_EXPENDITURE, SUPPORT_SERVICES_EXPENDITURE,
CAPITAL_OUTLAY_EXPENDITURE, AVG_MATH_4_SCORE,
AVG_MATH_8_SCORE, AVG_READING_4_SCORE, AVG_READING_8_SCORE
)
state_test <- working_df %>%
select(STATE, AVG_MATH_4_SCORE,
AVG_MATH_8_SCORE, AVG_READING_4_SCORE, AVG_READING_8_SCORE) %>%
gather(key = TEST, value = SCORE, -STATE)
graph_scores <- ggplot(state_test) +
geom_col(mapping = aes(x = STATE, y = SCORE, fill = TEST)) +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
graph_scores
shiny::runApp('Documents/INFO201/exercises-lukomh-1675024/chapter-19-exercises/exercise-5')
library(shiny)
library(ggplot2)
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
output$scatter <- renderPlot({
title <- paste0("MPG Dataset: ", input$x_var, " v.s.", input$y_var)
p <- ggplot(mpg) +
geom_point(mapping = aes_string(x = input$x_var, y = input$y_var),
size = input$size,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
# UI for scatterplot
library(shiny)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a variable `x_input` that stores a `selectInput()` for your
# variable to appear on the x axis of your chart.
# Use the vector of column names as possible values, and make sure
# to assign an inputId, label, and selected value
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
)
# Using a similar approach, create a variable `y_input` that stores a
# `selectInput()` for your variable to appear on the y axis of your chart.
# Add a `selectInput` for the `y` variable
y_input <- selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
"size",
label = "Size of point", min = 1, max = 10, value = 5
)
# Create a variable `ui` that is a `fluidPage()` ui element.
ui <- fluidPage(
# It should contain:
# A page header with a descriptive title
h1("MPG Dataset Exploration"),
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plotOutput("scatter")
)
runApp('Documents/INFO201/exercises-lukomh-1675024/chapter-19-exercises/exercise-5')
runApp('Documents/INFO201/exercises-lukomh-1675024/chapter-19-exercises/exercise-5')
runApp('Documents/INFO201/exercises-lukomh-1675024/chapter-19-exercises/exercise-5')
runApp('Documents/INFO201/exercises-lukomh-1675024/chapter-19-exercises/exercise-5')
runApp('Documents/INFO201/exercises-lukomh-1675024/chapter-19-exercises/exercise-5')
runApp('Documents/INFO201/exercises-lukomh-1675024/chapter-19-exercises/exercise-5')
runApp('Documents/INFO201/exercises-lukomh-1675024/chapter-19-exercises/exercise-5')
ui <- fluidPage(
includeCSS("style.css"),
navbarPage(
title = h1("Final Deliverable"),
intro_page,
page_three,
summary_page
)
)
shiny::runApp('Documents/INFO201/final-project-lukomh-1675024/final-deliverable')
runApp('Documents/INFO201/final-project-lukomh-1675024/final-deliverable')
runApp('Documents/INFO201/final-project-lukomh-1675024/final-deliverable')
setwd("~/Desktop/info478/info478-team2")
source("~/Desktop/info478/info478-team2/pharma.R")
View(deaths_sales)
View(herm)
deaths_2011 <- herm$deaths_total[1]
deaths_2011 <- herm$deaths_total[3]
View(meep)
revenue_2012 <- meep$Sum_Revenue[4]
=======
# Create a line graph showing the number of people in each state ("S", "I", "R")
# each year
ggplot(by_year) +
geom_line(aes(x = year, y = n, colour = status, group=status)) +
labs(
x = "Year",
y = "Number of People",
title = "Chicken Pox in a Population"
) +
scale_color_discrete(labels = c("Infected", "Resistant", "Susceptible"))
# Chicken Pox Simulation
library(tidyverse)
# Initial settings
pop <- rep("S", 1000)
pr_pox <- .2
data <- data.frame(
id = 1:1000,
year_0 = pop,
stringsAsFactors = F
)
# Iterate over 15 years
for (i in 1:15) {
# Store this year's column and last year's column names in variables
this_year <- paste0("year_", i)
last_year <- paste0("year_", i-1)
# To start, set this year in the data as status from last year
data[this_year] <- data[last_year]
# Create a data frame of new *infected* cases by giving every susceptible
# a probability of getting infected (using rbinom())
new_cases <- data %>%
filter(get(last_year) == "S") %>%
mutate(infected = rbinom(n(), 1, pr_pox)) %>%
filter(infected == 1) %>%
select(id, infected)
# Join your dataframe of new_cases onto the old dataframe
data <- data %>%
left_join(new_cases, by = "id") %>%
mutate(infected = if_else(is.na(infected), 0, 1))
# Replace the current year's values as infected where infections happened
data[data$infected == 1, this_year] <- "I"
# Set infected from last year to resistent this year
data[data[last_year] == "I", this_year] <- "R"
# Drop the `infected` column (so it can be recreated in the next iteration)
data <- data %>%
select(-infected)
}
# Compute number of people in each state in each year (to graph over time)
# Hint: you'll need to thoughtfully reshape the data using `pivot_longer`
long_data <- data %>%
pivot_longer(-id,
names_to = "year",
values_to = "status",
names_prefix = "year_"
#names_ptypes = list(year = numeric())
)
list(year==())
list(numeric())
# Create a line graph showing the number of people in each state ("S", "I", "R")
# each year
by_year <- long_data %>%
group_by(year, status) %>%
count() %>%
arrange(status, year)
ggplot(data = by_year) +
geom_line(mapping = aes(x = year, y = n, group = status, color = status)) +
scale_color_discrete(labels = c("Infected", "Resistant", "Susceptible"))
# Compute number of people in each state in each year (to graph over time)
# Hint: you'll need to thoughtfully reshape the data using `pivot_longer`
long_data <- data %>%
pivot_longer(-id,
names_to = "year",
values_to = "status",
names_prefix = "year_"
names_ptypes = list(year = numeric())
)
# Compute number of people in each state in each year (to graph over time)
# Hint: you'll need to thoughtfully reshape the data using `pivot_longer`
long_data <- data %>%
pivot_longer(-id,
names_to = "year",
values_to = "status",
names_prefix = "year_",
names_ptypes = list(year = numeric())
)
# Compute number of people in each state in each year (to graph over time)
# Hint: you'll need to thoughtfully reshape the data using `pivot_longer`
long_data <- data %>%
pivot_longer(-id,
names_to = "year",
values_to = "status",
names_prefix = "year_",
names_ptypes = (year = numeric())
)
# Create a line graph showing the number of people in each state ("S", "I", "R")
# each year
ggplot(by_year) +
geom_line(aes(x = year, y = n, colour = status, group=status)) +
labs(
x = "Year",
y = "Number of People",
title = "Chicken Pox in a Population"
) +
scale_color_discrete(labels = c("Infected", "Resistant", "Susceptible"))
by_year <- data %>%
pivot_longer(-id,
names_to = "year",
values_to = "status",
names_prefix = "year_",
names_ptypes = (year=numeric())
) %>%
group_by(year, status) %>%
count() %>%
arrange(year, status)
# Create a line graph showing the number of people in each state ("S", "I", "R")
# each year
ggplot(by_year) +
geom_line(aes(x = year, y = n, colour = status, group=status)) +
labs(
x = "Year",
y = "Number of People",
title = "Chicken Pox in a Population"
) +
scale_color_discrete(labels = c("Infected", "Resistant", "Susceptible"))
by_year <- data %>%
pivot_longer(-id,
names_to = "year",
values_to = "status",
names_prefix = "year_",
names_ptypes = (year=numeric())
) %>%
group_by(year, status) %>%
count() %>%
arrange(year, status)
by_year$n<-as.numeric(by_year$n)
str(by_year)
View(by_year)
by_year$year<-as.numeric(by_year$year)
str(by_year)
# Create a line graph showing the number of people in each state ("S", "I", "R")
# each year
ggplot(by_year) +
geom_line(aes(x = year, y = n, colour = status, group=status)) +
labs(
x = "Year",
y = "Number of People",
title = "Chicken Pox in a Population"
) +
scale_color_discrete(labels = c("Infected", "Resistant", "Susceptible"))
by_year <- data %>%
pivot_longer(-id,
names_to = "year",
values_to = "status",
names_prefix = "year_",
names_ptypes = (year=numeric())
) %>%
group_by(year, status) %>%
count() %>%
arrange(year, status)
# Create a line graph showing the number of people in each state ("S", "I", "R")
# each year
ggplot(by_year) +
geom_line(aes(x = year, y = n, colour = status, group=status)) +
labs(
x = "Year",
y = "Number of People",
title = "Chicken Pox in a Population"
) +
scale_color_discrete(labels = c("Infected", "Resistant", "Susceptible"))
str(by_year)
?names_ptypes
?pivot_longer
?pivot_longer
by_year <- data %>%
pivot_longer(-id,
names_to = "year",
values_to = "status",
names_prefix = "year_",
names_ptypes = list(year=is.numeric())
) %>%
group_by(year, status) %>%
count() %>%
arrange(year, status)
by_year <- data %>%
pivot_longer(-id,
names_to = "year",
values_to = "status",
names_prefix = "year_",
names_ptypes = list(as.numeric(year))
) %>%
group_by(year, status) %>%
count() %>%
arrange(year, status)
data<-fread(paste0(dir,"severe_complicated_influ.csv"))
library(data.table)
library(mgcv)
library(dlnm)
dir<-"H:/repos/iSchool/disease_modelling/"
data<-fread(paste0(dir,"severe_complicated_influ.csv"))
colnames(data)<-c("Onset","Excluded","Pending","Confirmed")
data[,date:=strptime(paste0(Onset,"1"),"%Y%U%u")]
data[,trend:=as.numeric(seq(1:nrow(data)))]
colnames(data)<-c("Onset","Excluded","Pending","Confirmed")
data[,date:=strptime(paste0(Onset,"1"),"%Y%U%u")]
data[,trend:=as.numeric(seq(1:nrow(data)))]
data[,month:=as.numeric(format(date,"%m"))]
data[,year:=as.numeric(format(date,"%Y"))]
### Explore time series
plot(data$date,data$Confirmed, xlab="",ylab="Cases",type="l",ylim=c(0,300))
par(new=TRUE)
plot(data$date,data$Excluded, xlab="",ylab="",type="l",ylim=c(0,300),col="gray",lty=2)
### Fit a loess smoother
lo.con <- loess(data$Confirmed ~ data$trend, span=0.1, degree=2)
p.con<-predict(lo.con, data.frame(trend = seq(1, nrow(data), 1)), se = TRUE)
install.packages("smooth")
install.packages("smooth")
dir<-"H:/repos/iSchool/disease_modelling/"
data<-fread(paste0(dir,"severe_complicated_influ.csv"))
library(data.table)
library(mgcv)
library(dlnm)
library(smooth)
dir<-"H:/repos/iSchool/disease_modelling/"
data<-fread(paste0(dir,"severe_complicated_influ.csv"))
colnames(data)<-c("Onset","Excluded","Pending","Confirmed")
data[,date:=strptime(paste0(Onset,"1"),"%Y%U%u")]
data[,trend:=as.numeric(seq(1:nrow(data)))]
data[,month:=as.numeric(format(date,"%m"))]
data[,year:=as.numeric(format(date,"%Y"))]
### Explore time series
plot(data$date,data$Confirmed, xlab="",ylab="Cases",type="l",ylim=c(0,300))
par(new=TRUE)
plot(data$date,data$Excluded, xlab="",ylab="",type="l",ylim=c(0,300),col="gray",lty=2)
### Fit a loess smoother
lo.con <- loess(data$Confirmed ~ data$trend, span=0.1, degree=2)
?sma
ourModel <- sma(data$Confirmed,h=18,holdout=TRUE,interval="sp")
mave <- sma(data$Confirmed,h=18,holdout=TRUE,interval="sp")
plot(mave)
plot(mave$fitted)
plot(data$date,mave$fitted)
mave <- sma(data$Confirmed,h=0,holdout=TRUE,interval="sp")
plot(data$date,mave$fitted)
mave <- sma(data$Confirmed)
plot(data$date,mave$fitted)
y <- movavg(data$Confirmed, 5, "s")# <- sma(data$Confirmed)
#library(smooth)
install.packages("pracma")
install.packages("pracma")
library(pracma)
y <- movavg(data$Confirmed, 5, "s")# <- sma(data$Confirmed)
plot(data$date,y$fitted)
plot(y)
y <- movavg(data$Confirmed, 15, "s")# <- sma(data$Confirmed)
str(y)
?movavg
abbshares <- scan(file="")
main = "Types of moving averages", sub = "Mid 2011--Mid 2012",
xlab = "Days", ylab = "ABB Shares Price (in USD)")
plot(data$Confirmed, type = "l", col = 1, ylim = c(15, 30),
main = "Types of moving averages", sub = "Mid 2011--Mid 2012",
xlab = "Days", ylab = "ABB Shares Price (in USD)")
plot(data$Confirmed, type = "l", col = 1, ylim = c(1, 300),
main = "Types of moving averages", sub = "Mid 2011--Mid 2012",
xlab = "Days", ylab = "ABB Shares Price (in USD)")
y <- movavg(data$Confirmed, 50, "s"); lines(y, col = 2)
y <- movavg(data$Confirmed, 50, "s"); lines(y, col = 2)
y <- movavg(data$Confirmed, 50, "t"); lines(y, col = 3)
y <- movavg(data$Confirmed, 50, "w"); lines(y, col = 4)
y <- movavg(data$Confirmed, 50, "m"); lines(y, col = 5)
y <- movavg(data$Confirmed, 50, "e"); lines(y, col = 6)
y <- movavg(data$Confirmed, 50, "r"); lines(y, col = 7)
grid()
legend(120, 29, c("original data", "simple", "triangular", "weighted",
"modified", "exponential", "running"),
col = 1:7, lty = 1, lwd = 1, box.col = "gray", bg = "white")
legend(600, 299, c("original data", "simple", "triangular", "weighted",
"modified", "exponential", "running"),
col = 1:7, lty = 1, lwd = 1, box.col = "gray", bg = "white")
legend(500, 299, c("original data", "simple", "triangular", "weighted",
"modified", "exponential", "running"),
col = 1:7, lty = 1, lwd = 1, box.col = "gray", bg = "white")
legend(500, -299, c("original data", "simple", "triangular", "weighted",
"modified", "exponential", "running"),
col = 1:7, lty = 1, lwd = 1, box.col = "gray", bg = "white")
plot(data$Confirmed, type = "l", col = 1, ylim = c(1, 300),
main = "Types of moving averages", sub = "Mid 2011--Mid 2012",
xlab = "Days", ylab = "ABB Shares Price (in USD)")
y <- movavg(data$Confirmed, 5, "s"); lines(y, col = 2)
y <- movavg(data$Confirmed, 15, "s"); lines(y, col = 2)
y <- movavg(data$Confirmed, 25, "s"); lines(y, col = 2)
plot(data$Confirmed, type = "l", col = 1, ylim = c(1, 300),
main = "Types of moving averages", sub = "Mid 2011--Mid 2012",
xlab = "Days", ylab = "ABB Shares Price (in USD)")
y <- movavg(data$Confirmed, 25, "s"); lines(y, col = 2)
### Moving averages
plot(data$Confirmed, type = "l", col = 1, ylim = c(1, 300),
xlab = "", ylab = "Cases")
y <- movavg(data$Confirmed, 25, "s"); lines(y, col = 2)
y <- movavg(data$Confirmed, 25, "w"); lines(y, col = 2)
y <- movavg(data$Confirmed, 25, "r"); lines(y, col = 2)
### Moving averages
plot(data$Confirmed, type = "l", col = 1, ylim = c(1, 300),
xlab = "", ylab = "Cases")
y <- movavg(data$Confirmed, 25, "r"); lines(y, col = 2)
y <- movavg(data$Confirmed, 25, "w"); lines(y, col = 2)
unemployment <- as.data.table(read.csv("http://datasets.flowingdata.com/unemployment-rate-1948-2010.csv", sep=","))
library(data.table)
library(mgcv)
library(dlnm)
library(pracma)
unemployment <- as.data.table(read.csv("http://datasets.flowingdata.com/unemployment-rate-1948-2010.csv", sep=","))
str(unemployment)
write.csv(unemployment,paste0(dir,"unemployment.csv"))
library(data.table)
library(mgcv)
library(dlnm)
dir<-"/homes/katburk/repos/iSchool/disease_modelling/"
dir<-"H:/repos/iSchool/disease_modelling/"
data<-fread(paste0(dir,"Life Expectancy Data.csv"))
str(data)
COR<-cor(na.omit(data[,4:22]))
require(ncdf4, lib.loc="/homes/katburk/R/")
install.packages("psych",loc="/homes/katburk/R/")
library("psych", lib.loc="/homes/katburk/R/")
install.packages("psych")
library("psych")
pairs.panels(data[,4:22], histogram=TRUE, pch=19)
library(data.table)
library(mgcv)
library(dlnm)
dir<-"/homes/katburk/repos/iSchool/disease_modelling/"
str(data)
View(data)
dir<-"/homes/katburk/repos/iSchool/disease_modelling/"
data<-fread(paste0(dir,"Life Expectancy Data.csv"))
DATA<-data[,c("Country","Year","Status","Life expectancy","Alcohol","percentage expenditure","Total expenditure",
"BMI","GDP","Income composition of resources","Schooling")]
COR<-cor(na.omit(DATA[,4:11]))
DATA<-data[,c("Country","Year","Status","Life expectancy","Alcohol","percentage expenditure","Total expenditure",
"BMI","GDP","Income composition of resources","Schooling")]
dir<-"/homes/katburk/repos/iSchool/disease_modelling/"
data<-fread(paste0(dir,"Life Expectancy Data.csv"))
DATA<-data[,c("Country","Year","Status","Life expectancy","Alcohol","percentage expenditure","Total expenditure",
"BMI","GDP","Income composition of resources","Schooling")]
str(data)
data<-fread(paste0(dir,"Life Expectancy Data.csv"))
dir<-"H:/repos/iSchool/disease_modelling/"
data<-fread(paste0(dir,"Life Expectancy Data.csv"))
str(data)
DATA<-data[,c("Country","Year","Status","Life expectancy","Alcohol","percentage expenditure","Total expenditure",
"BMI","GDP","Income composition of resources","Schooling")]
COR<-cor(na.omit(DATA[,4:11]))
COR
pairs.panels(DATA[,4:11], histogram=TRUE, pch=19)
names<-c("Country", "Year", "Status", "Life_expectancy", "Alcohol", "percentage_expenditure",
"Total_expenditure", "BMI", "GDP",  "Income_composition_of_resources", "Schooling")
colnames(DATA)<-names
plot(g)
g<-gam(Life_expectancy ~ as.factor(Status)+s(Year,k=4,fx=TRUE)+GDP, data=DATA)
plot(g)
mgam<-gam(Life_expectancy ~ as.factor(Status)+s(Year,k=4,fx=TRUE)+GDP, data=DATA)
pairs.panels(DATA[,4:11], histogram=TRUE, pch=19)
mgam<-gam(Life_expectancy ~ as.factor(Status)+s(Year,k=4,fx=TRUE)+GDP, data=DATA)
summary(mgam)
plot(mgam)
mgam<-gam(Life_expectancy ~ as.factor(Status)+s(Year,k=4,fx=TRUE)+GDP+BMI, data=DATA)
summary(mgam)
mgam<-gam(Life_expectancy ~ as.factor(Status)+s(Year,k=4,fx=TRUE)+s(GDP)+s(BMI), data=DATA)
summary(mgam)
plot(mgam)
str(data)
install.packages(c("Hmisc", "survey"))
# Set up
library(foreign)
library(survey)
library(Hmisc)
setwd("C:/Users/cello/info478/workbook-5-kwanneroy")
demo <- sasxport.get('DEMO_I.XPT')
# Set up
library(foreign)
library(survey)
library(Hmisc)
demo <- sasxport.get('DEMO_I.XPT')
setwd("C:/Users/cello/info478/workbook-5-kwanneroy")
demo <- sasxport.get('DEMO_I.XPT')
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(reshape)
# Set up data
state_income <- read.csv("data/household_median_income_2017.csv")
setwd("C:/Users/cello/info478/project/info478-team2")
# Set up data
state_income <- read.csv("data/household_median_income_2017.csv")
overdose_deaths <- read.csv("data/drug_overdose_deaths.csv")
# Merge Datasets
income_vs_deaths <- merge(state_income, overdose_deaths, by = 'State')
income_vs_deaths_2017 <- income_vs_deaths %>% select(State, X2017, X2017.Number.of.Deaths)
names(income_vs_deaths_2017)[2] <- "income"
names(income_vs_deaths_2017)[3] <- "deaths"
# convert income to an integer
income_vs_deaths_2017$income <- gsub(",","",income_vs_deaths_2017$income)
income_vs_deaths_2017$income =  as.numeric(income_vs_deaths_2017$income)
#final data set merge
mdata <- melt(income_vs_deaths_2017, id="State")
# Making plot
income_vs_deaths_2017_plot <- ggplot(mdata, aes(fill=variable, y=value, x=State)) + geom_point()
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(mdata, aes(fill=variable, y=value, x=State)) + geom_point() + geom_text()
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(mdata, aes(fill=variable, y=value, x=State, label=State)) + geom_point() + geom_text()
income_vs_deaths_2017_plot
View(income_vs_deaths_2017)
# Making plot
income_vs_deaths_2017_plot <- ggplot(mdata, aes(y = income, x = deaths, label = State)) + geom_point() + geom_text()
income_vs_deaths_2017_plot
View(mdata)
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017_plot, aes(y = income, x = deaths, label = State)) + geom_point() + geom_text()
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017_plot, aes(y = income, x = deaths, label = State)) + geom_point() + geom_text()
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017_plot, aes(y = deaths, x = income, label = State)) + geom_point() + geom_text()
# Merge Datasets
income_vs_deaths <- merge(state_income, overdose_deaths, by = 'State')
income_vs_deaths_2017 <- income_vs_deaths %>% select(State, X2017, X2017.Number.of.Deaths)
names(income_vs_deaths_2017)[2] <- "income"
names(income_vs_deaths_2017)[3] <- "deaths"
# convert income to an integer
income_vs_deaths_2017$income <- gsub(",","",income_vs_deaths_2017$income)
income_vs_deaths_2017$income =  as.numeric(income_vs_deaths_2017$income)
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017_plot, aes(y = deaths, x = income, label = State)) + geom_point() + geom_text()
# Making plot
income_vs_deaths_2017_plot <- ggplot(mdata, aes(y = value, x = variable, label = State)) + geom_point() + geom_text()
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(mdata, aes(fill = variable, y = value, label = State)) + geom_point() + geom_text()
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(mdata, aes(x = variable, y = value, label = State)) + geom_point() + geom_text()
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y = deaths, label = State)) + geom_point() + geom_text()
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y = deaths, label = State)) + geom_point() + geom_text() + geom_repel()
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y = deaths, label = State)) + geom_point() + geom_text() + geom_label_repel()
library(ggrepel)
install.packages(ggrepel)
install.packages("ggrepel")
(ggrepel)
library(ggrepel)
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y = deaths, label = State)) + geom_point() + geom_text() + geom_label_repel()
income_vs_deaths_2017_plot
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y = deaths, label = State)) + geom_point() + geom_label_repel()
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y = deaths, label = State)) + geom_point() + geom_label_repel(aes(label = State, x = income, y = deaths)
box.padding = 0.35, point.padding = 0.5)
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y = deaths, label = State)) + geom_point() + geom_label_repel(aes(label = State, x = income, y = deaths),
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y = deaths, label = State)) + geom_point() + geom_label_repel(aes(label = State, x = income, y = deaths),
box.padding = 0.35, point.padding = 0.5)
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y = deaths, label = State)) + geom_point() + geom_label_repel(aes(label = State, x = income, y = deaths),
box.padding = 0.35, point.padding = 0.5)
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y = deaths, label = State)) + geom_point() + geom_label_repel(aes(label = State, x = income, y = deaths),
box.padding = 0.35, point.padding = 0.5)
income_vs_deaths_2017_plot
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(reshape)
library(ggrepel)
# Set up data
state_income <- read.csv("data/household_median_income_2017.csv")
overdose_deaths <- read.csv("data/drug_overdose_deaths.csv")
# Merge Datasets
income_vs_deaths <- merge(state_income, overdose_deaths, by = 'State')
income_vs_deaths_2017 <- income_vs_deaths %>% select(State, X2017, X2017.Number.of.Deaths)
names(income_vs_deaths_2017)[2] <- "income"
names(income_vs_deaths_2017)[3] <- "deaths"
# convert income to an integer
income_vs_deaths_2017$income <- gsub(",","",income_vs_deaths_2017$income)
income_vs_deaths_2017$income =  as.numeric(income_vs_deaths_2017$income)
#final data set merge
mdata <- melt(income_vs_deaths_2017, id="State")
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(fill=variable, y=value, x=State)) + geom_point()
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y= deaths, label =State)) + geom_point() + geom_label_repel(aes(label = State, x = income, y = deaths), box.padding = 0.35, point.padding = 0.5)
income_vs_deaths_2017_plot
# Making plot
income_vs_deaths_2017_plot <- ggplot(income_vs_deaths_2017, aes(x = income, y= deaths, label =State)) + geom_point() +
geom_label_repel(aes(label = State, x = income, y = deaths), box.padding = 0.35, point.padding = 0.5)
income_vs_deaths_2017_plot
>>>>>>> 412df0b62ebbecf435fc5666bb0e392dcb7209bb
