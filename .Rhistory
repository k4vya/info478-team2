title = "Incarcerated Population Per Race Over Time",
x = "Year",
y = "Population (# people)",
color = "Race"
)
################################################################################
##### PART #3 #####
##### Highest Black Incarceration Rates
# Making a data frame of the top 10 states with the highest rates
# of black incarceration, including other incarceration rate totals
black_incarceration_df <- total_incarcerated_na_rm_df %>%
filter(year == most_recent_year_w_data) %>%
group_by(state) %>%
replace_na(list(total_incarcerated = 0, total_incarcerated_black = 0, total_pop_15to64 = 0)) %>%
summarize(total_incar_by_state = sum(total_incarcerated),
black_incar_by_state = sum(total_incarcerated_black),
total_pop_15to64_by_state = sum(total_pop_15to64),
black_pop_15to64_by_state = sum(black_pop_15to64)) %>%
mutate(incar_rate = total_incar_by_state / total_pop_15to64_by_state,
black_incar_rate = black_incar_by_state / black_pop_15to64_by_state) %>%
arrange(-black_incar_rate) %>%
slice_max(black_incar_rate, n = 10)
# Extracting an ordered vector of states to use as a factor
top_10_black_incar_states <- black_incarceration_df %>%
arrange(black_incar_rate) %>%
pull(state)
# Making a data frame of the top 10 states with high rates of black incarceration by
# reshaping `black_incarceration_df` to plot on a bar graph
top_10_black_incarceration_states_df <- black_incarceration_df %>%
select(state, incar_rate, black_incar_rate) %>%
pivot_longer(!state, names_to = "metric", values_to = "rate")
# Making a factor for the order of states
top_10_black_incarceration_states_df$state <- top_10_black_incarceration_states_df$state %>%
factor(levels = top_10_black_incar_states)
# Plotting `States with the Highest Rate of Black Incarceration`
top_10_black_incarceration_plot <- ggplot(data = top_10_black_incarceration_states_df) +
geom_col(mapping = aes(x = state, y = rate, fill = metric), position = position_dodge2(reverse = TRUE)) +
coord_flip() +
labs(
title = "States with the Highest Rate of Black Incarceration",
x = "State",
y = "Percent Incarcerated"
) +
scale_fill_manual(values = c("black", "red"), labels = c("Black", "Total")) +
scale_y_continuous(labels = scales::percent)
################################################################################
##### PART #4 #####
##### Racial Incarceration Discrepancy Map
# Making a data frame with the black and white incarceration rates per county,
# with a calculated column of the ratio of black to white incarceration rates
incarceration_rates_df <- total_incarcerated_na_rm_df %>%
filter(year == most_recent_year_w_data) %>%
filter(state == "WA") %>%
select(fips, state, county_name, total_incarcerated_black,
total_incarcerated_white, black_pop_15to64, white_pop_15to64) %>%
replace_na(list(black_pop_15to64 = 0, white_pop_15to64 = 0)) %>%
mutate(black_incar_rate = total_incarcerated_black / black_pop_15to64,
white_incar_rate = total_incarcerated_white / white_pop_15to64,
ratio_black_white_incar_rate = black_incar_rate / white_incar_rate)
# Making a shape file of Washington by joining the `maps` county data frame with
# the maps `county.fips` data frame
washington_shape_df <- map_data("county") %>%
filter(region == "washington") %>%
mutate(polyname = paste(region, subregion, sep = ","))
washington_fips_shape_df <- left_join(washington_shape_df, maps::county.fips)
# Fill missing FIPS values for `pierce` and `san juan` counties
washington_fips_shape_df[washington_fips_shape_df$subregion == "pierce", "fips"] <- "53053"
washington_fips_shape_df[washington_fips_shape_df$subregion == "san juan", "fips"] <- "53055"
# Convert `fips` column of shape file to numeric type, and make
# `wa_racial_discrepancy_df` for map plotting
washington_fips_shape_df$fips <- as.numeric(washington_fips_shape_df$fips)
wa_racial_discrepancy_df <- left_join(washington_fips_shape_df, incarceration_rates_df)
# Plotting `racial_incarceration_discrepancy_map` use a chloropleth map
racial_incarceration_discrepancy_map <- ggplot(data = wa_racial_discrepancy_df) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = ratio_black_white_incar_rate),
color = "black",
size = 0.1
) +
scale_fill_distiller(palette = "YlOrRd", direction = 1) +
coord_map() +
labs(title = "Discrepancies Between Racial Incarceration Rates in WA",
fill = "Ratio of Black:White",
caption = "Displays the ratio of the black incarceration rate to white incarceration
rate. A ratio of 2.0 signifies that black people are twice as likely to be
incarcerated as white people.") +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "#505772"))
################################################################################
##### PART #5 #####
##### Racial Incarceration Disparity Map of South Dakota: the State with the
##### Highest Rate of Native Incarceration
# Making a data frame of total incarceration rates for white and native populations
native_incar_df <- total_incarcerated_na_rm_df %>%
select(yfips, year, fips, state, county_name, total_pop_15to64, white_pop_15to64,
native_pop_15to64, total_incarcerated, total_incarcerated_white,
total_incarcerated_native) %>%
filter(year == most_recent_year_w_data) %>%
mutate(white_incar_rate = total_incarcerated_white / white_pop_15to64,
native_incar_rate = total_incarcerated_native / native_pop_15to64)
# Replacing all incarceration rate data `NaN` with zero
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
native_incar_df <- replace(native_incar_df, is.nan(native_incar_df), 0)
# Creating a calculated column of native:white incarceration ratio, and arranging
# by states with the highest ratio
native_incar_df <- native_incar_df %>%
mutate(ratio_native_white_incar_rate = native_incar_rate / white_incar_rate) %>%
arrange(-ratio_native_white_incar_rate)
# The state with the highest ratio of native:white incarceration is South Dakota (with Inf)
# and also a few more of the highest rates
# Filtering `native incarceration` data frame to focus on South Dakota
native_incar_df <- native_incar_df %>%
filter(state == "SD")
# Setting the `Inf` value of native:white incarceration ratio to the next highest
# real value in South Dakota
highest_rate_native_incar <- max(native_incar_df$ratio_native_white_incar_rate
[is.finite(native_incar_df$ratio_native_white_incar_rate)])
native_incar_df$ratio_native_white_incar_rate[is.infinite(native_incar_df$ratio_native_white_incar_rate)] <- highest_rate_native_incar
# Replacing all native:white incarceration ratio data `NaN` with zero
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
native_incar_df <- replace(native_incar_df, is.nan(native_incar_df), 0)
# Making a shape file of South Dakota by joining the `maps` county data frame with
# the maps `county.fips` data frame
south_dakota_shape_df <- map_data("county") %>%
filter(region == "south dakota") %>%
mutate(polyname = paste(region, subregion, sep = ","))
south_dakota_fips_shape_df <- left_join(south_dakota_shape_df, maps::county.fips)
# # Convert `fips` column of shape file to numeric type, and make
# `sd_racial_discrepancy_df` for map plotting
south_dakota_fips_shape_df$fips <- as.numeric(south_dakota_fips_shape_df$fips)
sd_racial_discrepancy_df <- left_join(south_dakota_fips_shape_df, native_incar_df)
# Plotting the `sd_racial_discrepancy_df`
sd_racial_incarceration_discrepancy_map <- ggplot(data = sd_racial_discrepancy_df) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = ratio_native_white_incar_rate),
color = "black",
size = 0.1
) +
scale_fill_distiller(palette = "YlGnBu", direction = 1) +
coord_map() +
labs(title = "Discrepancies Between Racial Incarceration Rates in SD",
fill = "Ratio of Native:White",
caption = "Displays the ratio of the Native American incarceration rate to
white incarceration rate. A ratio of 200.0 signifies that native people are 200 times
as likely to be incarcerated as white people. NOTE: there is no data on Oglala Lakota
County, as it does not have its own county seat or fips mapping data.") +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "#4a201f"))
################################################################################
install.packages("shiny")
library("shiny")
?fluid_page
my_ui <- fluidPage(
# h1 creates top-level header
h1("Hello Shiny"),
# other paragraph of text
p("This is Joel's shiny demo!"),
# control widget
textInput(inputId = "user_name", label = "what is your name?")
)
# Server is a function that takes input and output arguments
my_server <- function(inputlist, outputlist) {
# this is a function
}
# connect the UI and server in the app!
shinyApp(ui = my_ui, server = my_server)
# Server is a function that takes input and output arguments
my_server <- function(inputlist, outputlist) {
# this is a function
}
# connect the UI and server in the app!
shinyApp(ui = my_ui, server = my_server)
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
runApp('Documents/INFO 201/lecture/Lecture14_shiny.R')
read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/section1/data/ccvi-US.csv?token=ASNPNBAAU4J4HNA2JD6MLQLAIGDLE")
#--- summary analysis section of Section 2.
library("maps")
library("ggplot2")
library("tidyverse")
library("leaflet")
library("mapproj")
library("maps")
library("tidyverse")
library("leaflet")
library("mapproj")
ccvi_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/section1/
data/ccvi-US.csv?token=ASNPNBAAU4J4HNA2JD6MLQLAIGDLE", stringsAsFactors = FALSE))
ccvi_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/section1/data/ccvi-US.csv?token=ASNPNBFQAW2JSYVSMWFTJXDAIGDY2", stringsAsFactors = FALSE))
View(ccvi_df)
covid_stats_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/main/data/multiple_covid_stats.csv?token=ASNPNBDHNBSYGJUVM4PRUQ3AIGD62",
stringsAsFactors = FALSE))
View(covid_stats_df)
ccvi_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/section1/data/ccvi-US.csv?token=ASNPNBFQAW2JSYVSMWFTJXDAIGDY2", stringsAsFactors = FALSE))
View(ccvi_df)
covid_stats_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/main/data/multiple_covid_stats.csv?token=ASNPNBDHNBSYGJUVM4PRUQ3AIGD62", stringsAsFactors = FALSE))
View(covid_stats_df)
ccvi_df %>%
select(countyName, stateName, ccvi)
ccvi_df %>%
select(countyName, stateName, ccvi)
View(ccvi_df)
ccvi_df %>%
select(countyName, stateName, ccvi)
View(ccvi_df)
subset_ccvi <- ccvi_df %>%
select(countyName, stateName, ccvi)
View(subset_ccvi)
View(covid_stats_df)
View(ccvi_)
View(ccvi)
View(ccvi_df)
ccvi_df %>%
group_by(state) %>%
summarise(avg_ccvi = mean(ccvi)) %>%
View()
ccvi_df %>%
group_by(stateName) %>%
summarise(avg_ccvi = mean(ccvi)) %>%
View()
test_function <- function(dataframe) {
dataframe %>%
group_by(state) %>%
summarize(avg_ccvi = mean(ccvi))
}
knitr::opts_chunk$set(echo = TRUE)
# include all setup code, like `library` and `source` that'll be used for all code throughout this doc
ccvi_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/section1/data/ccvi-US.csv?token=ASNPNBFQAW2JSYVSMWFTJXDAIGDY2", stringsAsFactors = FALSE))
covid_stats_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/main/data/multiple_covid_stats.csv?token=ASNPNBDHNBSYGJUVM4PRUQ3AIGD62", stringsAsFactors = FALSE))
test_table
source("section2.R")
test_table <- test_function(ccvi_df)
test_function <- function(dataframe) {
dataframe %>%
group_by(stateName) %>%
summarize(avg_ccvi = mean(ccvi))
}
test_table <- test_function(ccvi_df)
print(test_table)
# Code for plotting graphics
source("section2.R")
test_table <- test_function(ccvi_df)
print(test_table)
test_function <- function(dataframe) {
dataframe %>%
group_by(stateName) %>%
summarize(avg_ccvi = mean(ccvi))
}
source("section2.R")
test_table <- test_function(ccvi_df)
print(test_table)
source("section2.R")
source("section2.R")
test_table <- test_function(ccvi_df)
print(test_table)
ccvi_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/section1/data/ccvi-US.csv?token=ASNPNBFQAW2JSYVSMWFTJXDAIGDY2", stringsAsFactors = FALSE))
covid_stats_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/main/data/multiple_covid_stats.csv?token=ASNPNBDHNBSYGJUVM4PRUQ3AIGD62", stringsAsFactors = FALSE))
test_plot <- function(dataframe) {
ggplot(data = dataframe) +
geom_col(mapping = aes(x = stateName, y = ccvi))
}
test_function(ccvi_df)
test_df <- test_function(ccvi_df)
test_plot(test_df)
test_plot <- function(dataframe) {
ggplot(data = dataframe) +
geom_col(mapping = aes(x = stateName, y = avg_ccvi))
}
test_plot(test_df)
source("section2.R")
test_table <- test_function(ccvi_df)
test_plot(test_table)
test_plot(test_table)
library("maps")
library("tidyverse")
library("leaflet")
library("mapproj")
library("maps")
library("tidyverse")
library("leaflet")
library("mapproj")
View(ccvi_df)
map_data("state")
maps:county.fips
maps::county.fips
us_map_shape <- map_data("state")
# Rename the 'cases' and 'deaths' columns to more descriptive names
covid_stats_df <- covid_stats_df %>%
rename(covid_cases = cases, covid_deaths = deaths)
library(tidyr)
# library(leaflet)
library(mapproj)
library(dplyr)
library("ggplot2")
library(tidyr)
# library(leaflet)
library(mapproj)
library(dplyr)
library("ggplot2")
ccvi_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/main/data/ccvi-US.csv?token=ASLZXO5B5EVB5PBEDQVS6M3AJMEAW",
stringsAsFactors = FALSE))
# Data Wrangling
# Convert the 'date' column into a Date data type
covid_stats_df$date <- as.Date(covid_stats_df$date, "%m/%d/%y")
#Arrange dataset by date (ascending order)
covid_stats_df <- arrange(covid_stats_df, date)
# Rename the 'cases' and 'deaths' columns to more descriptive names
covid_stats_df <- covid_stats_df %>%
rename(covid_cases = cases, covid_deaths = deaths)
# Create data frame for total cases and deaths per county
covid_percent_per_county_df <- covid_stats_df %>%
group_by(state, county) %>%
summarize(total_cases_per_county = max(covid_cases), total_deaths_per_county = max(covid_deaths),
total_pop_per_county = max(total_population))
# Create data frame for total cases and deaths per state
covid_percent_per_state_df <- covid_percent_per_county_df %>%
group_by(state) %>%
summarize(across(.cols = total_cases_per_county:total_pop_per_county, .fns = sum, na.rm = TRUE))
minority_ccvi_df <- ccvi_df %>%
select(county = countyName, state = stateName, ccvi, minority.status.and.language)
# Create a data frame of the percent of COVID deaths per county
percent_deaths_df <- covid_stats_df %>%
mutate(county_state = paste(county, state, sep = ", ")) %>%
mutate(percent_cases = 100 * (covid_cases / total_population)) %>%
mutate(percent_deaths = 100 * (covid_deaths / total_population)) %>%
select(date, fips, county_state, percent_deaths) %>%
group_by(fips, county_state) %>%
summarize(percent_deaths = max(percent_deaths), .groups = "drop") %>%
na.omit()
ccvi_indexes_df <- ccvi_df %>%
rename(fips = FIPS) %>%
select(fips, ccvi, socioeconomic.status, minority.status.and.language, epidemiological.factors,
healthcare.system.factors, household.and.transportation, high.risk.environments,
population.density)
# Create overall data fra
# Reformat `ccvi_death_rate` data frame to long form for plotting
ccvi_death_rate_df <- left_join(percent_deaths_df, ccvi_indexes_df)
ccvi_death_rate_plot_df <- ccvi_death_rate_df %>%
select(!fips) %>%
select(!county_state) %>%
pivot_longer(!percent_deaths, names_to = "factor", values_to = "ccvi")
ccvi_death_rate_plot <- ggplot(data = ccvi_death_rate_plot_df) +
geom_smooth(mapping = aes(x = percent_deaths, y = ccvi, color = factor),
se = FALSE) +
ylim(0, 1) +
scale_color_manual(values = c("#E01A4F", "#3DDC97", "#83ECDB", "#2CC9C9", "#709BFF",
"#3370FF", "#0043E0", "#0A3599"),
labels = c("Overall CCVI", "Epidemiological", "Healthcare System",
"High Risk Enviornment", "Household & Transportation",
"Minority Status & Language", "Population Density",
"Socioeconomic Status")) +
aes(group = rev(factor)) +
labs(
title = "COVID-19 Vulnerability vs. Death Rate for Various Factors",
x = "Death Rate (%)",
y = "CCVI",
color = "CCVI Factors",
caption = "Plot of CCVI as it relates to the death rate due to COVID-19 across counties in
the U.S. The CCVI value is based on several component factors, whose
respective trends are also shown. A CCVI value of 0.0 means that a region has
very low vulnerability to COVID-19 due to that specific factor, and a value
of 1.0 means a region has very high vulnerability."
)
ccvi_death_rate_plot
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("knitr")
library("tidyr")
library("ggplot2")
library("stringr")
library("mapproj")
library("maps")
# include all setup code, like `library` and `source` that'll be used for all code throughout this doc
library("knitr")
ccvi_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/main/data/ccvi-US.csv?token=ASLZXO5B5EVB5PBEDQVS6M3AJMEAW", stringsAsFactors = FALSE))
covid_stats_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/main/data/multiple_covid_stats.csv?token=ASLZXO667GLC2NEFWPLIWE3AJMDXG", stringsAsFactors = FALSE))
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("knitr")
library("tidyr")
library("ggplot2")
library("stringr")
library("mapproj")
library("maps")
# include all setup code, like `library` and `source` that'll be used for all code throughout this doc
library("knitr")
ccvi_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/main/data/ccvi-US.csv?token=ASLZXO5B5EVB5PBEDQVS6M3AJMEAW", stringsAsFactors = FALSE))
covid_stats_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/main/data/multiple_covid_stats.csv?token=ASLZXO667GLC2NEFWPLIWE3AJMDXG", stringsAsFactors = FALSE))
source("section3.R")
kable(avg_lowest_death_rate, caption = "Data Used for Analysis and Visualization")
ccvi_df <- data.frame(read.csv("https://raw.githubusercontent.com/info201b-wi21/project-taniabhatti/main/data/ccvi-US.csv?token=ASLZXO5B5EVB5PBEDQVS6M3AJMEAW", stringsAsFactors = FALSE))
View(ccvi_df)
kable(avg_lowest_death_rate, caption = "Average CCVI Values for the 5 Counties with the Lowest COVID-19 Death Rates")
kable(avg_highest_death_rate, caption = "Average CCVI Values for the 5 Counties with the Highest COVID-19 Death Rates")
?var
var(c(0.666, 0.316, 0.302, 0.218, 0.268, 0.148, 0.222))
kable(avg_highest_death_rate, caption = "Average CCVI Values for the 5 Counties with the Highest COVID-19 Death Rates")
var(c(0.666, 0.316, 0.302, 0.218, 0.268, 0.148, 0.222))
var(c(0.342, 0.194, 0.394, 0.328, 0.49, 0.546, 0.248))
low_variance <- var(c(0.342, 0.194, 0.394, 0.328, 0.49, 0.546, 0.248))
high_variance <- var(c(0.666, 0.316, 0.302, 0.218, 0.268, 0.148, 0.222))
paste("Variance =", high_variance)
paste("Variance =", round(high_variance, 3))
paste("Variance =", round(low_variance, 3))
kable(avg_lowest_death_rate, caption = "Average CCVI Values for the 5 Counties with the Lowest COVID-19 Death Rates")
low_variance <- var(c(0.342, 0.194, 0.394, 0.328, 0.49, 0.546, 0.248))
paste("Variance =", round(low_variance, 3))
low_variance <- var(c(0.342, 0.194, 0.394, 0.328, 0.49, 0.546, 0.248))
low_variance
pnorm(-5, 0, 1)
pnorm(2, 0, 1)
1-pnorm(2, 0, 1)
1 - pnorm(-0.1, 0, 0.0314)
1 - pnorm(0.1, 0, 0.0314)
pnorm(0.053, 0, 0.0318)
1 - pnorm(0.053, 0, 0.0318)
1 - pnorm(0.053, 0, 0.0318)
1-pchisq(11.46, 2)
1 - pt(1.91, 10)
(1- pt(1.91, 10))*2
(1- pt(-3.45, 16))
(1- pt(-3.45, 16))*2
pt(-3.45, 16)
2*pt(-3.45, 16)
2*(1 - pt(0.83, 6))
1 - pchisq(143.21, 30)
1-pnorm(0.143, 0.128)
2*(1 - pt(6.179, 9))
2*pt(6.179, 9)
1 - pt(6.179, 9)
1 - pchisq(11.143, 2)
1 - pt(11.092, 48)
1 - pt(11.09170798, 48)
qt(0.975, 48)
# Making plot
income_vs_deaths_2017_plot <- ggplot(mdata, aes(fill=variable, y=value, x=State)) +
geom_bar(position="dodge", stat="identity") + coord_flip() + ylab("Income vs Deaths")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(reshape)
state_income <- read.csv("data/household_median_income_2017.csv")
overdose_deaths <- read.csv("data/drug_overdose_deaths.csv")
# Merge Datasets
income_vs_deaths <- merge(state_income, overdose_deaths, by = 'State')
income_vs_deaths_2017 <- income_vs_deaths %>% select(State, X2017, X2017.Number.of.Deaths)
names(income_vs_deaths_2017)[2] <- "income"
names(income_vs_deaths_2017)[3] <- "deaths"
# convert income to an integer
income_vs_deaths_2017$income <- gsub(",","",income_vs_deaths_2017$income)
income_vs_deaths_2017$income =  as.numeric(income_vs_deaths_2017$income)
#final data set merge
mdata <- melt(income_vs_deaths_2017, id="State")
# Set up data
state_income <- read.csv("data/household_median_income_2017.csv")
# Set up data
state_income <- read.csv("data/household_median_income_2017.csv")
setwd("~/Documents/INFO478/info478-team2")
# Set up data
state_income <- read.csv("data/household_median_income_2017.csv")
overdose_deaths <- read.csv("data/drug_overdose_deaths.csv")
# Merge Datasets
income_vs_deaths <- merge(state_income, overdose_deaths, by = 'State')
overdose_deaths <- read.csv("data/drug_overdose_deaths.csv")
knitr::opts_chunk$set(echo = TRUE)
source("pharma.R")
source("income.R")
#final data set merge
mdata <- melt(income_vs_deaths_2017, id="State")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(reshape)
# Set up data
state_income <- read.csv("data/household_median_income_2017.csv")
overdose_deaths <- read.csv("data/drug_overdose_deaths.csv")
overdose_deaths <- read.csv("data/drug_overdose_deaths.csv")
View("data/drug_overdose_deaths.csv")
View(data/drug_overdose_deaths.csv)
setwd("~/Documents/INFO478/info478-team2")
setwd("~/Documents/INFO478/info478-team2")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
# Set up data
state_income <- read.csv("data/household_median_income_2017.csv")
overdose_deaths <- read.csv("data/drug_overdose_deaths.csv")
